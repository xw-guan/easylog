package easylog

import (
	"io"
)

// Levels
const (
	_		uint8 = iota
	FATAL
	PANIC
	ERROR
	WARN
	INFO
	DEBUG
	TRACE
)

// Level strings
const (
	StrFATAL = "FATAL"
	StrPANIC = "PANIC"
	StrERROR = "ERROR"
	StrWARN  = "WARN"
	StrINFO  = "INFO"
	StrDEBUG = "DEBUG"
	StrTRACE = "TRACE"
)

// Map level strings to uint8 values
var lvAtoi = map[string]uint8{
	StrFATAL: FATAL,
	StrPANIC: PANIC,
	StrERROR: ERROR,
	StrWARN:  WARN,
	StrINFO:  INFO,
	StrDEBUG: DEBUG,
	StrTRACE: TRACE,
}

// Map level uint8 values to strings
var lvItoa = map[uint8]string{
	FATAL: StrFATAL,
	PANIC: StrPANIC,
	ERROR: StrERROR,
	WARN:  StrWARN,
	INFO:  StrINFO,
	DEBUG: StrDEBUG,
	TRACE: StrTRACE,
}

// These flags define which text to prefix to each log entry generated by the Config,
// including flags inherited from std pkg log and flags defined by EasyLog (after LUTC).
const (
	Ldate         = 1 << iota // the date in the local time zone: 2009/01/23
	Ltime                     // the time in the local time zone: 01:23:23
	Lmicroseconds             // microsecond resolution: 01:23:23.123123.  assumes Ltime.
	Llongfile                 // full filename name and line number: /a/b/c/d.go:23
	Lshortfile                // final filename name element and line number: d.go:23. overrides Llongfile
	LUTC                      // if Ldate or Ltime is set, use UTC rather than the local time zone
	Llevel                    // level of log: [ERROR] [INFO]
	//Ldaily                    // one log filename one day
)

type Config interface {
	Flag() int
	SetFlag(flag int)
	Writer() io.Writer
	SetWriter(w io.Writer)
	Level() uint8
	SetLevel(lv string)
	SetOutputFile(filePath string, daily bool) error
}

type Logger interface {
	Fatal(msg ...interface{})
	Panic(msg ...interface{})
	Error(msg ...interface{})
	Warn(msg ...interface{})
	Info(msg ...interface{})
	Debug(msg ...interface{})
	Trace(msg ...interface{})
	Fatalf(format string, msg ...interface{})
	Panicf(format string, msg ...interface{})
	Errorf(format string, msg ...interface{})
	Warnf(format string, msg ...interface{})
	Infof(format string, msg ...interface{})
	Debugf(format string, msg ...interface{})
	Tracef(format string, msg ...interface{})
}

var stdLogger = NewEasyLogger()

func SetLevel(lv string) {
	stdLogger.SetLevel(lv)
}

func SetWritter(w io.Writer) {
	stdLogger.SetWriter(w)
}

func SetFlag(flag int) {
	stdLogger.SetFlag(flag)
}

func SetOutputFile(filePath string, daily bool) (err error) {
	return stdLogger.SetOutputFile(filePath, daily)
}

func Fatal(msg ...interface{}) {
	stdLogger.Fatal(msg...)
}

func Fatalf(format string, msg ...interface{}) {
	stdLogger.Fatalf(format, msg...)
}

func Panic(msg ...interface{}) {
	stdLogger.Panic(msg...)
}

func Panicf(format string, msg ...interface{}) {
	stdLogger.Panicf(format, msg...)
}

func Error(msg ...interface{}) {
	stdLogger.Error(msg...)
}

func Errorf(format string, msg ...interface{}) {
	stdLogger.Errorf(format, msg...)
}

func Warn(msg ...interface{}) {
	stdLogger.Warn(msg...)
}

func Warnf(format string, msg ...interface{}) {
	stdLogger.Warnf(format, msg...)
}

func Info(msg ...interface{}) {
	stdLogger.Info(msg...)
}

func Infof(format string, msg ...interface{}) {
	stdLogger.Infof(format, msg...)
}

func Debug(msg ...interface{}) {
	stdLogger.Debug(msg...)
}

func Debugf(format string, msg ...interface{}) {
	stdLogger.Debugf(format, msg...)
}

func Trace(msg ...interface{}) {
	stdLogger.Trace(msg...)
}

func Tracef(format string, msg ...interface{}) {
	stdLogger.Tracef(format, msg...)
}
